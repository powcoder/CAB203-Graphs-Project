https://powcoder.com
代写代考加微信 powcoder
Assignment Project Exam Help
Add WeChat powcoder
import os
import ast
import unittest
from inspect import getsource
import project as P
from pprint import pprint

# WARNING!  Do not edit this file!
# If modify this file then it might not catch errors in your project code.

scriptDirectory = os.path.dirname(__file__)
allowed_modules = [ 'csv', 'graphs', 'digraphs' ]

def assert_no_loops(s, f):
    f_ast = ast.parse(getsource(f))
    for node in ast.walk(f_ast):
        if isinstance(node, ast.For):
            s.fail(f'function {f.__name__} uses a for loop.')
        if isinstance(node, ast.While):
            s.fail(f'function {f.__name__} uses a while loop.')


# This test does not count for any marks.  It just helps to ensure
# that your code will run on the test system.
class TestImportedModules(unittest.TestCase):
   def test_modules(self):
      with open('project.py', "r") as f:
         file_raw = f.read()
         player_ast = ast.parse(file_raw)

      def imported_modules():
         for node in ast.walk(player_ast):
               if isinstance(node, ast.Import):
                  yield from (x.name.split('.')[0] for x in node.names)
               if isinstance(node, ast.ImportFrom) and node.level is None:
                  yield node.module.split('.')[0]

      for module in imported_modules():
         if module not in allowed_modules:
               self.fail(f'module {module} imported by submission but not allowed.')


# Question 1
class TestGamesOK(unittest.TestCase):
   def test_noLoops(self):
      assert_no_loops(self, P.gamesOK)
      

   def test_k33(self):
      games = { (u, v) for u in range(3) for v in range(3, 6) }
      self.assertTrue(P.gamesOK(games))


   def test_triangles(self):
      games = { 
         (0, 2), (0, 3), (0, 4),
         (1, 3), (1, 4), (1, 5),
         (2, 4), (2, 5),
         (3, 5)
      }
      self.assertTrue(P.gamesOK(games))


   def test_bad_triangles_1(self):
      games = { 
         (0, 2), (0, 3), (0, 4),
         (1, 3), (1, 4), (1, 5),
         (2, 4), (2, 5),
         (3, 5),
         (0, 5)
      }
      self.assertFalse(P.gamesOK(games))
   

   def test_5cycle(self):
      games = { 
         (0, 1), (1, 2), (2, 3), (3, 4), (4, 0)
      }
      self.assertFalse(P.gamesOK(games))


   def test_k5(self):
      games = {  (u, v)  for u in range(5)  for v in range(5)  if u < v }
      self.assertTrue(P.gamesOK(games))

# Question 2

class TestReferees(unittest.TestCase):
   def test_no_loops(self):
      assert_no_loops(self, P.referees)


   def test_1(self):
      refereecsvfilename = os.path.join(scriptDirectory, 'referees1.csv')
      games = { ('Bob', 'Alice'), ('Joe', 'Charlie'), ('Elaine', 'Rene') }
      self.assertEqual(P.referees(games, refereecsvfilename), {
         ('Bob', 'Alice'): 'Rene',
         ('Joe', 'Charlie'): 'David',
         ('Elaine', 'Rene'): 'Joe'
      })


   def test_2(self):
      refereecsvfilename = os.path.join(scriptDirectory, 'referees1.csv')
      games = { ('Bob', 'Alice'), ('Joe', 'Charlie'), ('Ellie', 'Rene') }
      self.assertEqual(P.referees(games, refereecsvfilename), None)


   def test_3(self):
      refereecsvfilename = os.path.join(scriptDirectory, 'referees2.csv')
      games = {  
         ('Gong Gong', 'Jobu Tupaki'),
         ('Gong Gong', 'Deirdre'),
         ('Joy', 'Waymond'),
         ('Deirdre', 'Jobu Tupaki')
      }
      r = P.referees(games, refereecsvfilename)
      self.assertEqual(r, {
         ('Gong Gong', 'Jobu Tupaki'): 'Deirdre',
         ('Gong Gong', 'Deirdre'): 'Waymond',
         ('Joy', 'Waymond'): 'Gong Gong',
         ('Deirdre', 'Jobu Tupaki'): 'Evalyn'
      })


   def test_4(self):
      refereecsvfilename = os.path.join(scriptDirectory, 'referees3.csv')
      games = {  
         ('Spike Spiegel', 'Vicious'),
         ('Jet Black', 'Ein'),
         ('Faye Valentine', 'Edward'),
         ('Edward', 'Julia'),
         ('Ein', 'Faye Valentine'),
         ('Vicious', 'Jet Black'),
         ('Julia', 'Spike Spiegel')
      }
      r = P.referees(games, refereecsvfilename)
      self.assertEqual(r, {
         ('Edward', 'Julia'): 'Faye Valentine',
         ('Ein', 'Faye Valentine'): 'Julia',
         ('Faye Valentine', 'Edward'): 'Vicious',
         ('Jet Black', 'Ein'): 'Spike Spiegel',
         ('Julia', 'Spike Spiegel'): 'Ein',
         ('Spike Spiegel', 'Vicious'): 'Jet Black',
         ('Vicious', 'Jet Black'): 'Edward'
      })


   def test_5(self):
      refereecsvfilename = os.path.join(scriptDirectory, 'referees3.csv')
      games = {  
         ('Spike Spiegel', 'Vicious'),
         ('Jet Black', 'Ein'),
         ('Faye Valentine', 'Edward'),
         ('Edward', 'Julia'),
         ('Ein', 'Faye Valentine'),
         ('Vicious', 'Edward'),
         ('Julia', 'Spike Spiegel')
      }
      r = P.referees(games, refereecsvfilename)
      self.assertEqual(r, None)

# Question 3

class TestgameGroups(unittest.TestCase):
   def test_no_loops(self):
      assert_no_loops(self, P.gameGroups)


   def test_1(self):
      self.assertEqual(P.gameGroups( { ('Alice', 'Bob'): 'Rene'} ), [ { ('Alice', 'Bob') } ])


   def checkGameGroups(self, assignedReferees, gameGroups):
      numgames = len(assignedReferees)
      games = set(assignedReferees.keys())
      self.assertEqual(sum( len(gameGroup) for gameGroup in gameGroups), numgames)

      for gameGroup in gameGroups:
         for u in gameGroup:
            self.assertTrue(u in games)
            U = set(u) | { assignedReferees[u] }
            for v in gameGroup:
               if u != v:
                  V = set(v) | { assignedReferees[v] }
                  self.assertTrue(U.isdisjoint(V))
         for t2 in gameGroups:
            if t2 != gameGroup:       
               self.assertTrue(gameGroup.isdisjoint(t2))


   def test_2(self):
      assignedReferees = { ('Alice', 'Bob'): 'Rene', ('Elaine', 'Charlie'): 'Dave' }
      schedule = P.gameGroups(assignedReferees)
      self.assertEqual(len(schedule), 1)
      self.checkGameGroups(assignedReferees, schedule)


   def test_3(self):
      assignedReferees = { 
         ('Alice', 'Bob'): 'Rene', 
         ('Elaine', 'Charlie'): 'Dave',
         ('Rene', 'Elaine'): 'Alice',
         ('Dave', 'Bob'): 'Charlie'
      }
      schedule = P.gameGroups(assignedReferees)
      self.assertEqual(len(schedule), 2)
      self.checkGameGroups(assignedReferees, schedule)


   def test_gameGroups_4(self):
      assignedReferees = { 
         ('Alice', 'Bob'): 'Rene', 
         ('Elaine', 'Charlie'): 'Dave',
         ('Rene', 'Elaine'): 'Alice',
         ('Dave', 'Bob'): 'Charlie',
         ('Alice', 'Rene'): 'Dave'
      }
      schedule = P.gameGroups(assignedReferees)
      self.assertEqual(len(schedule), 3)
      self.checkGameGroups(assignedReferees, schedule)


   def test_gameGroups_5(self):
      assignedReferees = { 
         ('Alice', 'Bob'): 'Rene', 
         ('Elaine', 'Charlie'): 'Dave',
         ('Rene', 'Elaine'): 'Alice',
         ('Dave', 'Bob'): 'Charlie',
         ('Alice', 'Rene'): 'Dave',
         ('Dave', 'Elaine'): 'Rene'
      }
      schedule = P.gameGroups(assignedReferees)
      self.assertEqual(len(schedule), 4)
      self.checkGameGroups(assignedReferees, schedule)

   
# Question 4

class TestGamesSchedule(unittest.TestCase):
   def test_no_loops(self):
      assert_no_loops(self, P.gameSchedule)
      

   def test_1(self):
      assignedReferees = {
         ('Alice', 'Bob'): 'Charlie',
         ('Charlie', 'Bob'): 'Rene'
      }

      gameGroups = [
         { ('Alice', 'Bob') },
         { ('Charlie', 'Bob') },
      ]

      order = P.gameSchedule(assignedReferees, gameGroups)
      self.assertEqual(order, [
         { ('Charlie', 'Bob') },
         { ('Alice', 'Bob') },
      ])


   def test_2(self):
      assignedReferees =  {
         ('Spike Spiegel', 'Vicious'): 'Jet Black',
         ('Edward', 'Julia'): 'Faye Valentine',
         ('Ein', 'Faye Valentine'): 'Julia',
         ('Faye Valentine', 'Edward'): 'Vicious',
         ('Jet Black', 'Ein'): 'Spike Spiegel',
         ('Julia', 'Spike Spiegel'): 'Ein',
         ('Vicious', 'Jet Black'): 'Edward'
      }

      gameGroups = [
         {('Spike Spiegel', 'Vicious'), ('Ein', 'Faye Valentine')},
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Faye Valentine', 'Edward'), ('Julia', 'Spike Spiegel')},
         {('Vicious', 'Jet Black')}
      ]

      order = P.gameSchedule(assignedReferees, gameGroups)
      self.assertEqual(order, None)


   def test_3(self):
      assignedReferees =  {
         ('Edward', 'Julia'): 'Faye Valentine',
         ('Faye Valentine', 'Edward'): 'Evalyn',
         ('Jet Black', 'Ein'): 'Spike Spiegel',
         ('Julia', 'Spike Spiegel'): 'Waymond',
         ('Spike Spiegel', 'Vicious'): 'Faye Valentine',
         ('Vicious', 'Jet Black'): 'Julia'
      }

      gameGroups = [
         {('Spike Spiegel', 'Vicious')},
         {('Vicious', 'Jet Black')},
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Faye Valentine', 'Edward'), ('Julia', 'Spike Spiegel')}
      ]

      order = P.gameSchedule(assignedReferees, gameGroups)
      self.assertEqual(order, [
         {('Julia', 'Spike Spiegel'), ('Faye Valentine', 'Edward')},
         {('Spike Spiegel', 'Vicious') },
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Vicious', 'Jet Black')}
      ])

   def test_4(self):
      assignedReferees =  {
         ('Edward', 'Julia'): 'Evalyn',
         ('Faye Valentine', 'Edward'): 'Jobu Topaki',
         ('Jet Black', 'Ein'): 'Waymond',
         ('Julia', 'Spike Spiegel'): 'Jet Black',
         ('Spike Spiegel', 'Vicious'): 'Faye Valentine',
         ('Vicious', 'Jet Black'): 'Ein'
      }

      gameGroups = [
         {('Spike Spiegel', 'Vicious')},
         {('Vicious', 'Jet Black')},
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Faye Valentine', 'Edward'), ('Julia', 'Spike Spiegel')}
      ]

      order = P.gameSchedule(assignedReferees, gameGroups)
      self.assertEqual(order, [
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Vicious', 'Jet Black')},
         {('Julia', 'Spike Spiegel'), ('Faye Valentine', 'Edward')},
         {('Spike Spiegel', 'Vicious') },
      ])

   def test_5(self):
      assignedReferees =  {
         ('Edward', 'Julia'): 'Evalyn',
         ('Faye Valentine', 'Edward'): 'Jobu Topaki',
         ('Jet Black', 'Ein'): 'Faye Valentine',
         ('Julia', 'Spike Spiegel'): 'Edward',
         ('Spike Spiegel', 'Vicious'): 'Julia',
         ('Vicious', 'Jet Black'): 'Ein'
      }

      gameGroups = [
         {('Spike Spiegel', 'Vicious')},
         {('Vicious', 'Jet Black'), ('Julia', 'Spike Spiegel')},
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Faye Valentine', 'Edward')}
      ]

      order = P.gameSchedule(assignedReferees, gameGroups)
      self.assertEqual(order, [
         {('Faye Valentine', 'Edward')},
         {('Jet Black', 'Ein'), ('Edward', 'Julia')},
         {('Vicious', 'Jet Black'), ('Julia', 'Spike Spiegel')},
         {('Spike Spiegel', 'Vicious')}
      ])

# Question 5

class TestScores(unittest.TestCase):   
   def test_no_loops(self):
      assert_no_loops(self, P.scores)


   def test_1(self):
      games = { ('Alice', 'Bob'),     # Alice primary win 3 points
               ('Alice', 'Dave'),     # Alice primary win 3 points
               ('Bob', 'Charlie'),    # Alice secondary win 1 point via Bob
               ('Dave', 'Charlie')}   # Alice secondary win 1 point via Dave
      
      self.assertEqual(P.scores(3, 2, 4, games), { 'Alice': 8, 'Bob': 3, 'Charlie': 0, 'Dave': 3 })


   def test_2(self):
      games = {
         ('Edward', 'Vicious'),
         ('Faye Valentine', 'Ein'),
         ('Faye Valentine', 'Vicious'),
         ('Jet Black', 'Edward'),
         ('Jet Black', 'Ein'),
         ('Jet Black', 'Vicious'),
         ('Spike Spiegel', 'Edward'),
         ('Spike Spiegel', 'Ein'),
         ('Spike Spiegel', 'Faye Valentine')
      }
      r = P.scores(4, 2, 8, games)
      self.assertEqual(r, {
         'Edward': 4,
         'Ein': 0,
         'Faye Valentine': 8,
         'Jet Black': 12,
         'Spike Spiegel': 14,
         'Vicious': 0
      })


   def test_3(self):
      games = {
         ('Edward', 'Jet Black'),
         ('Edward', 'Spike Spiegel'),
         ('Edward', 'Vicious'),
         ('Faye Valentine', 'Ein'),
         ('Faye Valentine', 'Vicious'),
         ('Jet Black', 'Ein'),
         ('Spike Spiegel', 'Ein'),
         ('Spike Spiegel', 'Faye Valentine'),
         ('Vicious', 'Jet Black')
      }
      r = P.scores(4, 2, 8, games)
      self.assertEqual(r, {
         'Edward': 16,
         'Ein': 0,
         'Faye Valentine': 10,
         'Jet Black': 4,
         'Spike Spiegel': 10,
         'Vicious': 6
      })


   def test_4(self):
      games = {
        ('Edward', 'Ein'),
         ('Edward', 'Spike Spiegel'),
         ('Ein', 'Vicious'),
         ('Faye Valentine', 'Edward'),
         ('Jet Black', 'Ein'),
         ('Jet Black', 'Spike Spiegel'),
         ('Spike Spiegel', 'Vicious'),
         ('Vicious', 'Faye Valentine')
      }
      r = P.scores(5, 2, 9, games)
      self.assertEqual(r, {
         'Edward': 12,
         'Ein': 7,
         'Faye Valentine': 9,
         'Jet Black': 12,
         'Spike Spiegel': 7,
         'Vicious': 7
      })


   def test_5(self):
      games = {
         ('Edward', 'Ein'),
         ('Edward', 'Vicious'),
         ('Julia', 'Ein'),
         ('Ein', 'Vicious'),
         ('Faye Valentine', 'Edward'),
         ('Faye Valentine', 'Ein'),
         ('Jet Black', 'Edward'),
         ('Jet Black', 'Faye Valentine'),
         ('Jet Black', 'Julia'),
         ('Jet Black', 'Spike Spiegel'),
         ('Spike Spiegel', 'Faye Valentine'),
         ('Spike Spiegel', 'Julia'),
         ('Vicious', 'Julia'),
         ('Vicious', 'Spike Spiegel')
      }
      r = P.scores(5, 2, 9, games)
      self.assertEqual(r, {
         'Edward': 14,
         'Ein': 9,
         'Faye Valentine': 12,
         'Jet Black': 24,
         'Julia': 7,
         'Spike Spiegel': 14,
         'Vicious': 14
      })


if __name__ == '__main__':
   unittest.main(argv=['-b'])